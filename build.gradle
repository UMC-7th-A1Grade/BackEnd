plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.19.0'
}

group = 'com.umc7th'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springAiVersion', "1.0.0-M2")
}

def gradleProfile = project.hasProperty('profile') ? project.property('profile').toString() : 'local'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring-boot-devtools
    if (gradleProfile == 'local') {
        implementation 'org.springframework.boot:spring-boot-devtools'
    }

    // Swagger openapi-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.1'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // DB
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Spring-security, Spring-security-test
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Jwt
    implementation group:'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group:'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group:'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Spring AI
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('compileJava') {
    dependsOn 'spotlessApply'
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        // Google JAVA Format 적용
        googleJavaFormat()
        // 아래 순서로 import 문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}

processResources {
    dependsOn 'copyResources'
}

tasks.register('copyResources', Copy) {
    from './BackEnd_Config'
    include '*.properties'
    into 'src/main/resources/'
}

test {
    doFirst {
        def profile = project.hasProperty('profile') ? project.property('profile').toString() : 'local'
        jvmArgs = ["-Dspring.profiles.active=${profile}"]
    }
}