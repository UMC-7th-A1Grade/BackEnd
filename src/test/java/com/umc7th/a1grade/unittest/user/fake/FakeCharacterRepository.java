package com.umc7th.a1grade.unittest.user.fake;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import com.umc7th.a1grade.domain.character.entity.Character;
import com.umc7th.a1grade.domain.character.repository.CharacterRepository;

public class FakeCharacterRepository implements CharacterRepository {
  private final AtomicLong autoGeneratedId = new AtomicLong(1);
  private final List<Character> data = new ArrayList<>();

  public FakeCharacterRepository() {
    save(Character.builder().name("캐릭터1").imageUrl("https://example.com/character1.png").build());
    save(Character.builder().name("캐릭터2").imageUrl("https://example.com/character2.png").build());
    save(Character.builder().name("캐릭터3").imageUrl("https://example.com/character3.png").build());
  }

  @Override
  public Optional<Character> findById(Long characterId) {
    return data.stream().filter(item -> Objects.equals(characterId, item.getId())).findAny();
  }

  @Override
  public List<Character> findAll() {
    return new ArrayList<>(data);
  }
  public Character save(Character character) {
    if (character.getId() == null || character.getId() == 0) {
      Character newCharacter =
          Character.builder()
              .id(autoGeneratedId.getAndIncrement())
              .name(character.getName())
              .imageUrl(character.getImageUrl())
              .build();
      data.add(newCharacter);
      return newCharacter;
    } else {
      data.removeIf(a -> a.getId().equals(character.getId()));
      data.add(character);
      return character;
    }
  }
}
